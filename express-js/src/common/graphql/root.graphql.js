import prisma from '../prisma/init.prisma';
import bcrypt from 'bcrypt'; // For password hashing/comparison
import { BadResquestException, UnauthorizedException } from '../helpers/exception.helper'; // For error handling
import { tokenService } from '../../services/token.service'; // For JWT token creation

// The root provides a resolver function for each API endpoint
export const root = {
  hello() {
    return 'Hello world!';
  },
  // args : d√πng ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ client cho query/mutation
  // context : d√πng ƒë·ªÉ truy·ªÅn th√¥ng tin/ph·ª• tr·ª£ cho resolver trong qu√° tr√¨nh x·ª≠ l√Ω request
  async getListArticle(args, context) {
    // n·∫øu kh√¥ng c√≥ user th√¨
    if (!context.user) throw new UnauthorizedException('Invalid account');

    let { page, pageSize, filters } = args;
    page = Number(page) > 0 ? Number(page) : 1;
    pageSize = Number(pageSize) > 0 ? Number(pageSize) : 1;

    // Parse filters safely
    try {
      filters = filters ? JSON.parse(filters) : {};
    } catch (error) {
      filters = {};
    }

    Object.entries(filters).forEach(([key, value]) => {
      if (!value) {
        delete filters['id'];
        return;
      }

      if (typeof value === 'string') {
        filters[key] = {
          contains: value, // SQL: CONTAINS
          // mode: 'insensitive',
        };
      }

      // TODO: x·ª≠ l√Ω ng√†y th√°ng
    });
    // index (OFFSET) = ( page - 1 ) * pageSize
    const index = (page - 1) * pageSize;

    // debug
    console.log({ page, pageSize, index, filters });

    const articlesPromise = prisma.articles.findMany({
      skip: index, // SQL: OFFSET
      take: pageSize, // SQL: LIMIT
      where: filters,
    });

    // ƒë·∫øm s·ªë l∆∞·ª£ng row trong table
    const totalItemPromise = prisma.articles.count(); // SQL: COUNT

    const [articles, totalItem] = await Promise.all([articlesPromise, totalItemPromise]);

    const totalPage = totalItem / pageSize;

    return {
      page,
      pageSize,
      totalItem: totalItem,
      totalPage: Math.ceil(totalPage),
      items: articles || [],
    };
  },

  async login(args, context) {
    const { email, password } = args;
    console.log('üöÄ ~ getListArticle ~ args:', args);
    console.log('üöÄ ~ getListArticle ~ context:', context);

    const userExits = await prisma.users.findUnique({
      where: {
        email: email,
      },
    });
    if (!userExits) throw new BadResquestException('Ng∆∞·ªùi d√πng ch∆∞a t·ªìn t·∫°i, vui l√≤ng ƒëƒÉng k√Ω');
    // N·∫øu code ch·∫°y ƒë∆∞·ª£c t·ªõi ƒë√¢y => ƒë·∫£m b·∫£o c√≥ userExits

    // do t√†i kho·∫£n ƒëƒÉng nh·∫≠p b·∫±ng gmail ho·∫∑c facebook
    // l√∫c n√†y t√†i kho·∫£n s·∫Ω kh√¥ng c√≥ m·∫≠t kh·∫©u
    // n√™n n·∫øu ng∆∞·ªùi d√πng c·ªë t√¨nh ƒëƒÉng nh·∫≠p b·∫±ng email th√¨ s·∫Ω kh√¥ng c√≥ m·∫≠t kh·∫©u ƒë·ªÉ ki·ªÉm tra
    // n√™n ph·∫£i b·∫Øt ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p b·∫±ng email v√†o setting ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i m·∫≠t kh·∫©u m·ªõi
    if (!userExits.password) {
      throw new BadResquestException(
        'Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng m·∫°ng x√£ h·ªôi (gmail, facebook), ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i m·∫≠t kh·∫©u m·ªõi trong setting',
      );
    }

    const isPassword = bcrypt.compareSync(password, userExits.password); // true
    if (!isPassword) throw new BadResquestException('M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
    // N·∫øu code ch·∫°y ƒë∆∞·ª£c t·ªõi ƒë√¢y => ng∆∞·ªùi d√πng n√†y h·ª£p l·ªá

    const tokens = tokenService.createTokens(userExits.id);

    console.log({ email, password });

    // sendMail(email)
    // sendMail("vulebaolong@gmail.com");

    return tokens;
  },
};
